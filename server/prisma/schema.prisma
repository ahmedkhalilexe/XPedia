// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Users {
  id                       String                     @id @default(cuid())
  email                    String                     @unique
  password                 String
  name                     String                     @default("")
  profilePicture           String                     @default("")
  dateOfBirth              DateTime
  createdAt                DateTime                   @default(now())
  updatedAt                DateTime                   @updatedAt
  Posts                    Posts[]
  PostComments             PostComments[]
  PostLikes                PostLikes[]
  Messages                 Messages[]
  ConversationParticipants ConversationParticipants[]
  friendshipsSent          Friendship[]               @relation("friendshipsSent")
  friendshipsReceived      Friendship[]               @relation("friendshipsReceived")

  friendRequestsSent     FriendRequests[] @relation("friendRequestsSent")
  friendRequestsReceived FriendRequests[] @relation("friendRequestsRecieved")
}

model Posts {
  id           String         @id @default(cuid())
  body         String
  user         Users          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  PostImages   PostImages[]
  PostComments PostComments[]
  PostLikes    PostLikes[]
}

model PostImages {
  id        String   @id @default(cuid())
  uri       String
  post      Posts    @relation(fields: [postId], references: [id])
  postId    String
  createdAt DateTime @default(now())
}

model PostComments {
  id        String   @id @default(cuid())
  body      String
  user      Users    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  post      Posts    @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PostLikes {
  id        String   @id @default(cuid())
  user      Users    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  post      Posts    @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String
  createdAt DateTime @default(now())

  @@unique([userId, postId])
}

model Friendship {
  id        String   @id @default(cuid())
  userA     Users    @relation("friendshipsSent", fields: [userAId], references: [id], onDelete: Cascade)
  userAId   String
  userB     Users    @relation("friendshipsReceived", fields: [userBId], references: [id], onDelete: Cascade)
  userBId   String
  createdAt DateTime @default(now())

  @@unique([userAId, userBId])
}

model FriendRequests {
  id         String              @id @default(cuid())
  sender     Users               @relation("friendRequestsSent", fields: [senderId], references: [id], onDelete: Cascade)
  senderId   String
  receiver   Users               @relation("friendRequestsRecieved", fields: [receiverId], references: [id], onDelete: Cascade)
  receiverId String
  status     FriendRequestStatus @default(PENDING)
  createdAt  DateTime            @default(now())

  @@unique([senderId, receiverId])
}

enum FriendRequestStatus {
  PENDING
  ACCEPTED
  REJECTED
}

model Conversations {
  id                       String                     @id @default(cuid())
  createdAt                DateTime                   @default(now())
  ConversationParticipants ConversationParticipants[]
  messages                 Messages[]
}

model ConversationParticipants {
  id             String        @id @default(cuid())
  conversation   Conversations @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  conversationId String
  user           Users         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String

  @@unique([conversationId, userId])
}

model Messages {
  id             String        @id @default(cuid())
  body           String
  user           Users         @relation(fields: [senderID], references: [id], onDelete: Cascade)
  senderID       String
  conversation   Conversations @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  conversationId String
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
}
